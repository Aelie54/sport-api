security:

    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto

    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~

        refresh_token:
            pattern:   ^/api/token/refresh
            stateless: true
            refresh_jwt: ~

        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

        admin:
            pattern : api/admin
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        exercise:
            pattern : api/exercise
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        fitness:
            pattern : api/fitness
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        gainage:
            pattern : api/gainage
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        musculation:
            pattern : api/musculation
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        titresfit:
            pattern : api/titresfit
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        titresgainage:
            pattern : api/titresgainage
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        titresmuscu:
            pattern : api/titresmuscu
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        training:
            pattern : api/training
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]

        user:
            pattern : api/user
            stateless : true
            jwt: ~
            methods: [GET, POST, PUT, PATCH, DELETE]


# Easy way to control access for large sections of your site
# Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/login, roles: PUBLIC_ACCESS }
        - { path: ^/api,       roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh, roles: PUBLIC_ACCESS }
        - { path: ^/api/admin, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/exercise, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/fitness, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/gainage, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/musculation, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/titresfit, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/titresgainage, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/titresmuscu, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/training, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }
        - { path: ^/api/user, roles: PUBLIC_ACCESS, methods: [GET, POST, PUT, PATCH, DELETE] }


    # - { path: ^/admin, roles: ROLE_ADMIN }
    # - { path: ^/profile, roles: ROLE_USER }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
